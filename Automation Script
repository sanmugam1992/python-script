import docker
import time
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("docker_monitor.log"),
        logging.StreamHandler()
    ]
)

# Constants
CPU_THRESHOLD = 80  # CPU usage threshold in percentage
MONITOR_INTERVAL = 10  # Time interval between checks in seconds

# Email configuration
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_FROM = "your_email@gmail.com"  # Replace with your Gmail address
EMAIL_TO = "recipient@gmail.com"  # Replace with the recipient's email address
EMAIL_PASSWORD = "your_gmail_password"  # Replace with your Gmail password or app password


def send_email_alert(container_name, cpu_usage):
    """
    Send an email alert when a container's CPU usage exceeds the threshold.
    """
    subject = f"ALERT: High CPU Usage in Container {container_name}"
    body = (
        f"Container {container_name} is using {cpu_usage:.2f}% CPU, "
        f"which exceeds the threshold of {CPU_THRESHOLD}%."
    )

    # Create the email message
    msg = MIMEMultipart()
    msg["From"] = EMAIL_FROM
    msg["To"] = EMAIL_TO
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        # Connect to the SMTP server
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()  # Use TLS encryption
            server.login(EMAIL_FROM, EMAIL_PASSWORD)
            server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())
        logging.info(f"Email alert sent for container {container_name}.")
    except Exception as e:
        logging.error(f"Failed to send email alert: {e}")


def get_docker_client():
    """Connect to the Docker daemon."""
    try:
        client = docker.from_env()
        logging.info("Successfully connected to Docker.")
        return client
    except Exception as e:
        logging.error(f"Failed to connect to Docker: {e}")
        raise


def get_container_cpu_usage(container):
    """Calculate CPU usage percentage for a container."""
    try:
        stats = container.stats(stream=False)
        cpu_stats = stats['cpu_stats']
        precpu_stats = stats['precpu_stats']

        cpu_delta = cpu_stats['cpu_usage']['total_usage'] - precpu_stats['cpu_usage']['total_usage']
        system_delta = cpu_stats['system_cpu_usage'] - precpu_stats['system_cpu_usage']

        if system_delta > 0 and cpu_delta > 0:
            cpu_percent = (cpu_delta / system_delta) * len(cpu_stats['cpu_usage']['percpu_usage']) * 100
            return round(cpu_percent, 2)
        return 0.0
    except Exception as e:
        logging.error(f"Error calculating CPU usage for container {container.name}: {e}")
        return 0.0


def monitor_containers(client, threshold):
    """Monitor CPU usage of all running containers."""
    try:
        containers = client.containers.list()
        if not containers:
            logging.info("No running containers found.")
            return

        for container in containers:
            cpu_usage = get_container_cpu_usage(container)
            logging.info(f"Container {container.name} - CPU Usage: {cpu_usage}%")

            if cpu_usage > threshold:
                alert_message = f"ALERT: Container {container.name} exceeded CPU threshold ({threshold}%) with {cpu_usage}% usage."
                logging.warning(alert_message)
                send_email_alert(container.name, cpu_usage)  # Send email alert
    except Exception as e:
        logging.error(f"Error monitoring containers: {e}")


def main():
    """Main function to run the monitoring script."""
    try:
        client = get_docker_client()
        logging.info("Starting Docker container monitoring...")

        while True:
            monitor_containers(client, CPU_THRESHOLD)
            time.sleep(MONITOR_INTERVAL)
    except KeyboardInterrupt:
        logging.info("Monitoring stopped by user.")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    finally:
        logging.info("Exiting Docker monitor script.")


if __name__ == "__main__":
    main()
